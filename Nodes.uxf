<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<diagram program="umlet" version="14.2">
  <zoom_level>8</zoom_level>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1232</x>
      <y>192</y>
      <w>152</w>
      <h>80</h>
    </coordinates>
    <panel_attributes>Node&lt;Type&gt;
--
- data : Type
--
+ Node(type) : constructor
+ getDtata() : Type
+ setData(Type) : void
bg=cyan</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1088</x>
      <y>88</y>
      <w>352</w>
      <h>88</h>
    </coordinates>
    <panel_attributes>LinearNode&lt;Type&gt;
--
- next : LinearNode&lt;Type&gt;*
--
+ LinearNode&lt;Type&gt;(Type) : constructor
+ LinearNode&lt;Type&gt;(Type, LinearNode&lt;Type&gt;*) : constructor
+ getNext() : LinearNode&lt;Type&gt;*
+ setNext(LinearNode&lt;Type&gt;*) : void

bg=blue</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1296</x>
      <y>168</y>
      <w>24</w>
      <h>40</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;30.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>904</x>
      <y>88</y>
      <w>176</w>
      <h>144</h>
    </coordinates>
    <panel_attributes>Array&lt;Type&gt;
--
- size : int
- internalArray : [Type]
--
+ Array(int) : constructor
+ getFromIndex(int) : Type
+ setAtIndex(int, Type) : void
+ getSize() : int
+ operator [] : Type/Type&amp;
+ operator = : Type&amp;
+ ~Arrayt() : destructor
bg=gray
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1216</x>
      <y>296</y>
      <w>176</w>
      <h>152</h>
    </coordinates>
    <panel_attributes>/List&lt;Type&gt;/
--
# size : int
--
*List Structure Methods*
getFromIndex(int) : Type
add(Type) : void
addAtIndex(int, Type) : void
remove(int) : Type
*List Accessors*
getSize() : int
getFront() : LinearNode&lt;Type&gt; *
getEnd() : LinearNode&lt;Type&gt; *
bg=red</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1368</x>
      <y>264</y>
      <w>24</w>
      <h>48</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;40.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1408</x>
      <y>616</y>
      <w>200</w>
      <h>256</h>
    </coordinates>
    <panel_attributes>Stack&lt;Type&gt;
--
--
+ Stack() : constructor
+ ~Stack() : destructor

*STACK*
+ push (type) : void
+ pop() : Type
+ peek() : Type

*List Structure methods*
+getFromIndex(int) : Type
+add(Type) :void
+addAtIndex(int, type) : void
+remove(int) : Type
+contains(Type) : bool
List Accessors
+getSize() : int
+getFrom() : LinearNode&lt;Type&gt;
+getEnd() : LinearNode&lt;Type&gt;</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>976</x>
      <y>624</y>
      <w>200</w>
      <h>272</h>
    </coordinates>
    <panel_attributes>Queue&lt;Type&gt;
--
--
+ Queue() : constructor
+ ~Queue() : destructor

*Queue Methods*
+ enqueue(Type) : void
+ dequeue() : Type
+ peek() : Type

*List Structure Methods*
+ getFromIndex(int) : Type
+ add(Type) : void
+ addAtIndex(int, Type) : void
+ remove(int) : Type
+ contains(Type) : bool

*List Accessors*
+ getSize() : int
+ getFront() : LinearNode&lt;Type&gt; *
+ getEnd() : LinearNode&lt;Type&gt; *




</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1352</x>
      <y>664</y>
      <w>24</w>
      <h>48</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;40.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1208</x>
      <y>664</y>
      <w>24</w>
      <h>48</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;40.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1400</x>
      <y>296</y>
      <w>192</w>
      <h>128</h>
    </coordinates>
    <panel_attributes>CrimeData
--
-Too Many
--
+ CrimeData() : constructor
+ CrimeData(string) : constructor
+ getXXX() : various
+ == : bool
+ &lt;&lt; : ostream
+ &lt; : bool
+ &gt; : bool</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1400</x>
      <y>432</y>
      <w>192</w>
      <h>128</h>
    </coordinates>
    <panel_attributes>Music
--
-Too Many
--
+ Music() : constructor
+ Music(string) : constructor
+ getXXX() : various
+ == : bool
+ &lt;&lt; : ostream
+ &lt; : bool
+ &gt; : bool</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1192</x>
      <y>456</y>
      <w>200</w>
      <h>216</h>
    </coordinates>
    <panel_attributes>LinkedList&lt;Type&gt;
--
- front : LinearNode&lt;Type&gt;
- end : LinearNode&lt;Type&gt;
--
+ LinkedList() : constructor
+ ~LinkedList() : destructor

+ getFromIndex(int) : Type
+ add(Type) : void
+ addAtIndex(int, Type) : Type
+ remove(int) : Type
+ contains(Type) : bool
+ setAtIndex(int, Type) : Type

+ getSize() : int
+ getFront() : LinearNode&lt;Type&gt; *
+ getEnd() : LinearNode&lt;Type&gt; *</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1392</x>
      <y>600</y>
      <w>24</w>
      <h>112</h>
    </coordinates>
    <panel_attributes>lt=-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;120.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1496</x>
      <y>600</y>
      <w>24</w>
      <h>32</h>
    </coordinates>
    <panel_attributes>lt=-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;20.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1392</x>
      <y>600</y>
      <w>128</w>
      <h>24</h>
    </coordinates>
    <panel_attributes>lt=-</panel_attributes>
    <additional_attributes>140.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1352</x>
      <y>688</y>
      <w>64</w>
      <h>24</h>
    </coordinates>
    <panel_attributes>lt=-</panel_attributes>
    <additional_attributes>60.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1176</x>
      <y>688</y>
      <w>56</w>
      <h>24</h>
    </coordinates>
    <panel_attributes>lt=-</panel_attributes>
    <additional_attributes>50.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1176</x>
      <y>608</y>
      <w>24</w>
      <h>104</h>
    </coordinates>
    <panel_attributes>lt=-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;110.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1072</x>
      <y>608</y>
      <w>128</w>
      <h>24</h>
    </coordinates>
    <panel_attributes>lt=-</panel_attributes>
    <additional_attributes>140.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1072</x>
      <y>608</y>
      <w>24</w>
      <h>32</h>
    </coordinates>
    <panel_attributes>lt=-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;20.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>848</x>
      <y>616</y>
      <w>144</w>
      <h>24</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;160.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>688</x>
      <y>616</y>
      <w>168</w>
      <h>72</h>
    </coordinates>
    <panel_attributes>LinearTester
--

+ testVsSTL() : void</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>512</x>
      <y>616</y>
      <w>168</w>
      <h>72</h>
    </coordinates>
    <panel_attributes>TreeTester
--

</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>512</x>
      <y>696</y>
      <w>168</w>
      <h>72</h>
    </coordinates>
    <panel_attributes>GraphTester
--

</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>688</x>
      <y>696</y>
      <w>168</w>
      <h>72</h>
    </coordinates>
    <panel_attributes>HashableTester
--

</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>688</x>
      <y>776</y>
      <w>168</w>
      <h>72</h>
    </coordinates>
    <panel_attributes>AlgorithmTester
--
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>840</x>
      <y>272</y>
      <w>368</w>
      <h>152</h>
    </coordinates>
    <panel_attributes>DoubleNode&lt;Type&gt;
--
- nextNode : DoubleNode&lt;Type&gt;*
- prevNode : DoubleNode&lt;Type&gt;*
--
+ DoubleNode() : constructor
+ DoubleNode(Type) : contructor
+ DoubleNode(Type; DoubleNode&lt;Type&gt;* ; DoubleNode&lt;Type&gt;*)

+ getNextNode() : DoubleNode&lt;Type&gt;*
+ setNextNode(DoubleNode&lt;Type&gt; *) : void
+ getPreviousNode() : DoubleNode&lt;Type&gt; *
+ setPreviousNode(DoubleNode&lt;Type&gt; *) : void
bg=cyan
transparency=0
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1000</x>
      <y>248</y>
      <w>248</w>
      <h>24</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>290.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1000</x>
      <y>248</y>
      <w>24</w>
      <h>40</h>
    </coordinates>
    <panel_attributes>lt=-</panel_attributes>
    <additional_attributes>10.0;30.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>616</x>
      <y>272</y>
      <w>216</w>
      <h>224</h>
    </coordinates>
    <panel_attributes>CircularList&lt;Type&gt;
--
- front : DoubleNode&lt;Type&gt; *
- end : DoubleNode&lt;Type&gt; *
- size : int
--
+ CircularList() : constructor
+ CircualrList : constructor

- findNode(int) : DoubleNode&lt;Type&gt;*
+ getFromIndex : Type
+ add(Type) : void
+ addAtIndex(int, Type) : void
+ remove(int) : Type
+ contains(Type) : bool
+ setAtIndex(int, Type) : Type

+ getSize() : int
bg=#40E0D0</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>920</x>
      <y>248</y>
      <w>24</w>
      <h>40</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;30.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>712</x>
      <y>248</y>
      <w>232</w>
      <h>24</h>
    </coordinates>
    <panel_attributes>lt=-</panel_attributes>
    <additional_attributes>10.0;10.0;270.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>712</x>
      <y>248</y>
      <w>24</w>
      <h>40</h>
    </coordinates>
    <panel_attributes>lt=-</panel_attributes>
    <additional_attributes>10.0;30.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>0</x>
      <y>112</y>
      <w>472</w>
      <h>472</h>
    </coordinates>
    <panel_attributes>NonLinear :: Graph
--
-MAXIMUM : int
-adjacencyMatrix  : bool [][]
-weightCostMatrix : int [][]
- graphData : Type []
- vertexCount : int
--

Graph() : constructor

+ addVertex(const Type&amp; value) : void

*Connect vertices*
+ addEdge (int source, int target);
+ addEdgeUndirected(int source, int target) : void
+ addEdgeCost(int source, int target, int cost) : void

*Disconnect vertices*
+ removeEdge(int source, int target) : void
+ removeEdgeUndirected(int source, int target) : void
+ removeEdgeCost(int source, int target) : void

*Accessors*
+ operator [] (int vertex) : Type &amp;
+ operator [] (int vertex) : Type const
+ size() const : int

*Check Connections*
+ hasUndirectedConnection(int source, int target) : const bool
+ areConnections(int source, int target) : const bool
+ neighbors(int vertex) : const std::set&lt;int&gt;

*Traversals*
+depthFirstTraversal(Graph&lt;Type&gt; &amp; graph, int vertex) : void
+breadFirstTraversal(Graph&lt;Type&gt; &amp; graph, int vertex) : void
+ costTraversal(Graph&lt;Type&gt; &amp; graph, int vertex) : void
- depthFirstTraversal(Graph&lt;Type&gt; &amp; graph, int vertex, bool markedVertices[]) : void
bg=pink</panel_attributes>
    <additional_attributes/>
  </element>
</diagram>
