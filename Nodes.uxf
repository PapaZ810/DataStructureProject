<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<diagram program="umlet" version="14.2">
  <zoom_level>5</zoom_level>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>950</x>
      <y>240</y>
      <w>95</w>
      <h>50</h>
    </coordinates>
    <panel_attributes>Node&lt;Type&gt;
--
- data : Type
--
+ Node(type) : constructor
+ getDtata() : Type
+ setData(Type) : void
bg=cyan</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>860</x>
      <y>175</y>
      <w>220</w>
      <h>55</h>
    </coordinates>
    <panel_attributes>LinearNode&lt;Type&gt;
--
- next : LinearNode&lt;Type&gt;*
--
+ LinearNode&lt;Type&gt;(Type) : constructor
+ LinearNode&lt;Type&gt;(Type, LinearNode&lt;Type&gt;*) : constructor
+ getNext() : LinearNode&lt;Type&gt;*
+ setNext(LinearNode&lt;Type&gt;*) : void

bg=blue</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>990</x>
      <y>225</y>
      <w>15</w>
      <h>25</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;30.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>745</x>
      <y>175</y>
      <w>110</w>
      <h>90</h>
    </coordinates>
    <panel_attributes>Array&lt;Type&gt;
--
- size : int
- internalArray : [Type]
--
+ Array(int) : constructor
+ getFromIndex(int) : Type
+ setAtIndex(int, Type) : void
+ getSize() : int
+ operator [] : Type/Type&amp;
+ operator = : Type&amp;
+ ~Arrayt() : destructor
bg=gray
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>940</x>
      <y>305</y>
      <w>110</w>
      <h>95</h>
    </coordinates>
    <panel_attributes>/List&lt;Type&gt;/
--
# size : int
--
*List Structure Methods*
getFromIndex(int) : Type
add(Type) : void
addAtIndex(int, Type) : void
remove(int) : Type
*List Accessors*
getSize() : int
getFront() : LinearNode&lt;Type&gt; *
getEnd() : LinearNode&lt;Type&gt; *
bg=red</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1035</x>
      <y>285</y>
      <w>15</w>
      <h>30</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;40.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1060</x>
      <y>505</y>
      <w>125</w>
      <h>160</h>
    </coordinates>
    <panel_attributes>Stack&lt;Type&gt;
--
--
+ Stack() : constructor
+ ~Stack() : destructor

*STACK*
+ push (type) : void
+ pop() : Type
+ peek() : Type

*List Structure methods*
+getFromIndex(int) : Type
+add(Type) :void
+addAtIndex(int, type) : void
+remove(int) : Type
+contains(Type) : bool
List Accessors
+getSize() : int
+getFrom() : LinearNode&lt;Type&gt;
+getEnd() : LinearNode&lt;Type&gt;</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>790</x>
      <y>510</y>
      <w>125</w>
      <h>170</h>
    </coordinates>
    <panel_attributes>Queue&lt;Type&gt;
--
--
+ Queue() : constructor
+ ~Queue() : destructor

*Queue Methods*
+ enqueue(Type) : void
+ dequeue() : Type
+ peek() : Type

*List Structure Methods*
+ getFromIndex(int) : Type
+ add(Type) : void
+ addAtIndex(int, Type) : void
+ remove(int) : Type
+ contains(Type) : bool

*List Accessors*
+ getSize() : int
+ getFront() : LinearNode&lt;Type&gt; *
+ getEnd() : LinearNode&lt;Type&gt; *




</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1025</x>
      <y>535</y>
      <w>15</w>
      <h>30</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;40.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>935</x>
      <y>535</y>
      <w>15</w>
      <h>30</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;40.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1055</x>
      <y>305</y>
      <w>120</w>
      <h>80</h>
    </coordinates>
    <panel_attributes>CrimeData
--
-Too Many
--
+ CrimeData() : constructor
+ CrimeData(string) : constructor
+ getXXX() : various
+ == : bool
+ &lt;&lt; : ostream
+ &lt; : bool
+ &gt; : bool</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1055</x>
      <y>390</y>
      <w>120</w>
      <h>80</h>
    </coordinates>
    <panel_attributes>Music
--
-Too Many
--
+ Music() : constructor
+ Music(string) : constructor
+ getXXX() : various
+ == : bool
+ &lt;&lt; : ostream
+ &lt; : bool
+ &gt; : bool</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>925</x>
      <y>405</y>
      <w>125</w>
      <h>135</h>
    </coordinates>
    <panel_attributes>LinkedList&lt;Type&gt;
--
- front : LinearNode&lt;Type&gt;
- end : LinearNode&lt;Type&gt;
--
+ LinkedList() : constructor
+ ~LinkedList() : destructor

+ getFromIndex(int) : Type
+ add(Type) : void
+ addAtIndex(int, Type) : Type
+ remove(int) : Type
+ contains(Type) : bool
+ setAtIndex(int, Type) : Type

+ getSize() : int
+ getFront() : LinearNode&lt;Type&gt; *
+ getEnd() : LinearNode&lt;Type&gt; *</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1050</x>
      <y>495</y>
      <w>15</w>
      <h>70</h>
    </coordinates>
    <panel_attributes>lt=-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;120.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1115</x>
      <y>495</y>
      <w>15</w>
      <h>20</h>
    </coordinates>
    <panel_attributes>lt=-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;20.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1050</x>
      <y>495</y>
      <w>80</w>
      <h>15</h>
    </coordinates>
    <panel_attributes>lt=-</panel_attributes>
    <additional_attributes>140.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1025</x>
      <y>550</y>
      <w>40</w>
      <h>15</h>
    </coordinates>
    <panel_attributes>lt=-</panel_attributes>
    <additional_attributes>60.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>915</x>
      <y>550</y>
      <w>35</w>
      <h>15</h>
    </coordinates>
    <panel_attributes>lt=-</panel_attributes>
    <additional_attributes>50.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>915</x>
      <y>500</y>
      <w>15</w>
      <h>65</h>
    </coordinates>
    <panel_attributes>lt=-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;110.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>850</x>
      <y>500</y>
      <w>80</w>
      <h>15</h>
    </coordinates>
    <panel_attributes>lt=-</panel_attributes>
    <additional_attributes>140.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>850</x>
      <y>500</y>
      <w>15</w>
      <h>20</h>
    </coordinates>
    <panel_attributes>lt=-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;20.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>710</x>
      <y>505</y>
      <w>90</w>
      <h>15</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;160.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>610</x>
      <y>505</y>
      <w>105</w>
      <h>45</h>
    </coordinates>
    <panel_attributes>LinearTester
--

+ testVsSTL() : void</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>500</x>
      <y>505</y>
      <w>105</w>
      <h>45</h>
    </coordinates>
    <panel_attributes>TreeTester
--

</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>500</x>
      <y>555</y>
      <w>105</w>
      <h>45</h>
    </coordinates>
    <panel_attributes>GraphTester
--

</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>610</x>
      <y>555</y>
      <w>105</w>
      <h>45</h>
    </coordinates>
    <panel_attributes>HashableTester
--

</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>610</x>
      <y>605</y>
      <w>105</w>
      <h>45</h>
    </coordinates>
    <panel_attributes>AlgorithmTester
--
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>705</x>
      <y>290</y>
      <w>230</w>
      <h>95</h>
    </coordinates>
    <panel_attributes>DoubleNode&lt;Type&gt;
--
- nextNode : DoubleNode&lt;Type&gt;*
- prevNode : DoubleNode&lt;Type&gt;*
--
+ DoubleNode() : constructor
+ DoubleNode(Type) : contructor
+ DoubleNode(Type; DoubleNode&lt;Type&gt;* ; DoubleNode&lt;Type&gt;*)

+ getNextNode() : DoubleNode&lt;Type&gt;*
+ setNextNode(DoubleNode&lt;Type&gt; *) : void
+ getPreviousNode() : DoubleNode&lt;Type&gt; *
+ setPreviousNode(DoubleNode&lt;Type&gt; *) : void
bg=cyan
transparency=0
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>805</x>
      <y>275</y>
      <w>155</w>
      <h>15</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>290.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>805</x>
      <y>275</y>
      <w>15</w>
      <h>25</h>
    </coordinates>
    <panel_attributes>lt=-</panel_attributes>
    <additional_attributes>10.0;30.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>565</x>
      <y>290</y>
      <w>135</w>
      <h>140</h>
    </coordinates>
    <panel_attributes>CircularList&lt;Type&gt;
--
- front : DoubleNode&lt;Type&gt; *
- end : DoubleNode&lt;Type&gt; *
- size : int
--
+ CircularList() : constructor
+ CircualrList : constructor

- findNode(int) : DoubleNode&lt;Type&gt;*
+ getFromIndex : Type
+ add(Type) : void
+ addAtIndex(int, Type) : void
+ remove(int) : Type
+ contains(Type) : bool
+ setAtIndex(int, Type) : Type

+ getSize() : int
bg=#40E0D0</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>755</x>
      <y>270</y>
      <w>15</w>
      <h>30</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;40.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>625</x>
      <y>270</y>
      <w>145</w>
      <h>15</h>
    </coordinates>
    <panel_attributes>lt=-</panel_attributes>
    <additional_attributes>10.0;10.0;270.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>625</x>
      <y>270</y>
      <w>15</w>
      <h>30</h>
    </coordinates>
    <panel_attributes>lt=-</panel_attributes>
    <additional_attributes>10.0;40.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>260</x>
      <y>200</y>
      <w>295</w>
      <h>295</h>
    </coordinates>
    <panel_attributes>NonLinear :: Graph
--
-MAXIMUM : int
-adjacencyMatrix  : bool [][]
-weightCostMatrix : int [][]
- graphData : Type []
- vertexCount : int
--

Graph() : constructor

+ addVertex(const Type&amp; value) : void

*Connect vertices*
+ addEdge (int source, int target);
+ addEdgeUndirected(int source, int target) : void
+ addEdgeCost(int source, int target, int cost) : void

*Disconnect vertices*
+ removeEdge(int source, int target) : void
+ removeEdgeUndirected(int source, int target) : void
+ removeEdgeCost(int source, int target) : void

*Accessors*
+ operator [] (int vertex) : Type &amp;
+ operator [] (int vertex) : Type const
+ size() const : int

*Check Connections*
+ hasUndirectedConnection(int source, int target) : const bool
+ areConnections(int source, int target) : const bool
+ neighbors(int vertex) : const std::set&lt;int&gt;

*Traversals*
+depthFirstTraversal(Graph&lt;Type&gt; &amp; graph, int vertex) : void
+breadFirstTraversal(Graph&lt;Type&gt; &amp; graph, int vertex) : void
+ costTraversal(Graph&lt;Type&gt; &amp; graph, int vertex) : void
- depthFirstTraversal(Graph&lt;Type&gt; &amp; graph, int vertex, bool markedVertices[]) : void
bg=pink</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1085</x>
      <y>175</y>
      <w>170</w>
      <h>120</h>
    </coordinates>
    <panel_attributes>BinaryTreeNode&lt;Type&gt;
--
- root : BinaryTreeNode&lt;Type&gt; *
- leftChild : BinaryTreeNode&lt;Type&gt; *
- rightChild : BinaryTreeNode&lt;Type&gt; *
--
+ BinaryTreeNode&lt;Type&gt;() : constructor
+ BinaryTreeNode&lt;Type&gt;(Type) : constructor

+ getRootNode() : BinaryTreeNode&lt;Type&gt; *
+ getLeftChild() : BinaryTreeNode&lt;Type&gt; *
+ getRightChild() : BinaryTreeNode&lt;Type&gt; *

+ setRootNode(BinaryTreeNode&lt;Type&gt; *) : void
+ setLeftChild(BinaryTreeNode&lt;Type&gt; *) : void
+ setRightChild(BinaryTreeNode&lt;Type&gt; *) : void
bg=blue</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1040</x>
      <y>260</y>
      <w>55</w>
      <h>15</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;90.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>210</x>
      <y>505</y>
      <w>285</w>
      <h>310</h>
    </coordinates>
    <panel_attributes>BinarySearchTree&lt;Type&gt;
--
*Structure*
+ BinarySearchTree() : Constructor
+ ~BinarySearchTree() : Destructor
# destroyTree() : void

*Information Methods*
+ getSize() : int
+ getHeight() : int
+ isComplete() : bool
+ isBalanced() : bool
+ getRoot() : BinaryTreeNode&lt;Type&gt;*

*Recursive Information*
# calculateSize(BinaryTreeNode&lt;Type&gt;* startNode) : int
# calculateHeight(BinaryTreeNode&lt;Type&gt;* startNode) : int
# isBalanced(BinarySearchTreeNode&lt;Type&gt;* startNode, int index, int size) : bool
# isComplete(BinaryTreeNode&lt;Type&gt;* startNode, int index, int size) : bool

*Data Methods*
+ insert(Type) : void
+ contains(Type) : bool
+ remove(Type) : void

*Recursive Data Helpers*
# removeNode(BinaryTreeNode&lt;Type&gt;* removeMe) : void

*Traversals*
+ inOrderTraversal() : void
+ perOrderTraversal() : void
+ postOrderTraversal() : void

*Recursive Traversal Helpers*
# inOrderTraversal(BinaryTreeNode&lt;Type&gt;* inStart) : void
# preOrderTraversal(BinaryTreeNode&lt;Type&gt;* preStart) : void
# postOrderTraversal(BinaryTreeNdoe&lt;Type&gt;* postStart) : void
# getRightMostChild(BinaryTreeNode&lt;Type&gt; *current) : BinaryTreeNode&lt;Type&gt;*
# getLeftMostChild(BinaryTreeNode&lt;Type&gt; *current) : BinaryTreeNode&lt;Type&gt;*
bg=green</panel_attributes>
    <additional_attributes/>
  </element>
</diagram>
