<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<diagram program="umlet" version="14.2">
  <zoom_level>9</zoom_level>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>810</x>
      <y>117</y>
      <w>171</w>
      <h>90</h>
    </coordinates>
    <panel_attributes>Node&lt;Type&gt;
--
- data : Type
--
+ Node(type) : constructor
+ getDtata() : Type
+ setData(Type) : void
bg=cyan</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>648</x>
      <y>0</y>
      <w>396</w>
      <h>99</h>
    </coordinates>
    <panel_attributes>LinearNode&lt;Type&gt;
--
- next : LinearNode&lt;Type&gt;*
--
+ LinearNode&lt;Type&gt;(Type) : constructor
+ LinearNode&lt;Type&gt;(Type, LinearNode&lt;Type&gt;*) : constructor
+ getNext() : LinearNode&lt;Type&gt;*
+ setNext(LinearNode&lt;Type&gt;*) : void

bg=blue</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>882</x>
      <y>90</y>
      <w>27</w>
      <h>45</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;30.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>441</x>
      <y>0</y>
      <w>198</w>
      <h>162</h>
    </coordinates>
    <panel_attributes>Array&lt;Type&gt;
--
- size : int
- internalArray : [Type]
--
+ Array(int) : constructor
+ getFromIndex(int) : Type
+ setAtIndex(int, Type) : void
+ getSize() : int
+ operator [] : Type/Type&amp;
+ operator = : Type&amp;
+ ~Arrayt() : destructor
bg=gray
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>792</x>
      <y>234</y>
      <w>198</w>
      <h>171</h>
    </coordinates>
    <panel_attributes>/List&lt;Type&gt;/
--
# size : int
--
*List Structure Methods*
getFromIndex(int) : Type
add(Type) : void
addAtIndex(int, Type) : void
remove(int) : Type
*List Accessors*
getSize() : int
getFront() : LinearNode&lt;Type&gt; *
getEnd() : LinearNode&lt;Type&gt; *
bg=red</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>963</x>
      <y>198</y>
      <w>27</w>
      <h>54</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;40.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1008</x>
      <y>621</y>
      <w>225</w>
      <h>288</h>
    </coordinates>
    <panel_attributes>Stack&lt;Type&gt;
--
--
+ Stack() : constructor
+ ~Stack() : destructor

*STACK*
+ push (type) : void
+ pop() : Type
+ peek() : Type

*List Structure methods*
+getFromIndex(int) : Type
+add(Type) :void
+addAtIndex(int, type) : void
+remove(int) : Type
+contains(Type) : bool
List Accessors
+getSize() : int
+getFrom() : LinearNode&lt;Type&gt;
+getEnd() : LinearNode&lt;Type&gt;</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>522</x>
      <y>603</y>
      <w>225</w>
      <h>306</h>
    </coordinates>
    <panel_attributes>Queue&lt;Type&gt;
--
--
+ Queue() : constructor
+ ~Queue() : destructor

*Queue Methods*
+ enqueue(Type) : void
+ dequeue() : Type
+ peek() : Type

*List Structure Methods*
+ getFromIndex(int) : Type
+ add(Type) : void
+ addAtIndex(int, Type) : void
+ remove(int) : Type
+ contains(Type) : bool

*List Accessors*
+ getSize() : int
+ getFront() : LinearNode&lt;Type&gt; *
+ getEnd() : LinearNode&lt;Type&gt; *




</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>945</x>
      <y>648</y>
      <w>27</w>
      <h>54</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;40.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>783</x>
      <y>648</y>
      <w>27</w>
      <h>54</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;40.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>999</x>
      <y>234</y>
      <w>216</w>
      <h>144</h>
    </coordinates>
    <panel_attributes>CrimeData
--
-Too Many
--
+ CrimeData() : constructor
+ CrimeData(string) : constructor
+ getXXX() : various
+ == : bool
+ &lt;&lt; : ostream
+ &lt; : bool
+ &gt; : bool</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>999</x>
      <y>387</y>
      <w>216</w>
      <h>144</h>
    </coordinates>
    <panel_attributes>Music
--
-Too Many
--
+ Music() : constructor
+ Music(string) : constructor
+ getXXX() : various
+ == : bool
+ &lt;&lt; : ostream
+ &lt; : bool
+ &gt; : bool</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>765</x>
      <y>414</y>
      <w>225</w>
      <h>243</h>
    </coordinates>
    <panel_attributes>LinkedList&lt;Type&gt;
--
- front : LinearNode&lt;Type&gt;
- end : LinearNode&lt;Type&gt;
--
+ LinkedList() : constructor
+ ~LinkedList() : destructor

+ getFromIndex(int) : Type
+ add(Type) : void
+ addAtIndex(int, Type) : Type
+ remove(int) : Type
+ contains(Type) : bool
+ setAtIndex(int, Type) : Type

+ getSize() : int
+ getFront() : LinearNode&lt;Type&gt; *
+ getEnd() : LinearNode&lt;Type&gt; *</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>990</x>
      <y>576</y>
      <w>27</w>
      <h>126</h>
    </coordinates>
    <panel_attributes>lt=-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;120.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1107</x>
      <y>576</y>
      <w>27</w>
      <h>63</h>
    </coordinates>
    <panel_attributes>lt=-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;50.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>990</x>
      <y>576</y>
      <w>144</w>
      <h>27</h>
    </coordinates>
    <panel_attributes>lt=-</panel_attributes>
    <additional_attributes>140.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>945</x>
      <y>675</y>
      <w>72</w>
      <h>27</h>
    </coordinates>
    <panel_attributes>lt=-</panel_attributes>
    <additional_attributes>60.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>747</x>
      <y>675</y>
      <w>63</w>
      <h>27</h>
    </coordinates>
    <panel_attributes>lt=-</panel_attributes>
    <additional_attributes>50.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>747</x>
      <y>567</y>
      <w>27</w>
      <h>135</h>
    </coordinates>
    <panel_attributes>lt=-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;130.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>630</x>
      <y>567</y>
      <w>144</w>
      <h>27</h>
    </coordinates>
    <panel_attributes>lt=-</panel_attributes>
    <additional_attributes>140.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>630</x>
      <y>567</y>
      <w>27</w>
      <h>54</h>
    </coordinates>
    <panel_attributes>lt=-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;40.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>378</x>
      <y>594</y>
      <w>162</w>
      <h>27</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;160.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>198</x>
      <y>594</y>
      <w>189</w>
      <h>81</h>
    </coordinates>
    <panel_attributes>LinearTester
--

+ testVsSTL() : void</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>0</x>
      <y>594</y>
      <w>189</w>
      <h>81</h>
    </coordinates>
    <panel_attributes>TreeTester
--

</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>0</x>
      <y>684</y>
      <w>189</w>
      <h>81</h>
    </coordinates>
    <panel_attributes>GraphTester
--

</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>198</x>
      <y>684</y>
      <w>189</w>
      <h>81</h>
    </coordinates>
    <panel_attributes>HashableTester
--

</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>198</x>
      <y>774</y>
      <w>189</w>
      <h>81</h>
    </coordinates>
    <panel_attributes>AlgorithmTester
--
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>369</x>
      <y>234</y>
      <w>414</w>
      <h>171</h>
    </coordinates>
    <panel_attributes>DoubleNode&lt;Type&gt;
--
- nextNode : DoubleNode&lt;Type&gt;*
- prevNode : DoubleNode&lt;TYpe&gt;*
--
+ DoubleNode() : constructor
+ DoubleNode(Type) : contructor
+ DoubleNode(Type; DoubleNode&lt;Type&gt;* ; DoubleNode&lt;Type&gt;*)

+ getNextNode() : DoubleNode&lt;Type&gt;*
+ setNextNode(DoubleNode&lt;Type&gt; *) : void
+ getPreviousNode() : DoubleNode&lt;Type&gt; *
+ setPreviousNode(DoubleNode&lt;Type&gt; *) : void </panel_attributes>
    <additional_attributes/>
  </element>
</diagram>
